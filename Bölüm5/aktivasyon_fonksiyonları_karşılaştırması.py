# -*- coding: utf-8 -*-
"""Aktivasyon_Fonksiyonları_Karşılaştırması.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/123wzXKgbp4VrkFxNaAsXCQNS_QaGeyb9

# Derin Öğrenme İçin Aktivasyon Fonksiyonlarının Karşılaştırılması


---


Bunun için MNIST veri seti için basit bir Evrişimli Sİnir ağı modeli tercih edilmiştir. 


*   Sigmoid Fonksiyonu
*   Hiperbolik Tanjant
*   ReLU Fonksiyonu
*   Leaky-ReLU Fonksiyonu
*   Swish Fonksiyonu

Aktivasyon fonksiyonlarının aynı veri seti ve derin öğrenme modeli için elde ettikleri doğrulama başarısı ve yitimi, eğitim başarısı ve yitimi hesaplanmaktadır. Histogramlar ile karşılaştırılması sunulmaktadır.


---


### Detaylar için lütfen blog yazısını inceleyiniz!

### Anlatım için videoyu takip edebilirsiniz!


---

### Google Colab Kimlik Doğrulama İşlemi
"""

from google.colab import drive
drive.mount('/content/drive/')

"""### Kullanılan donanımın bilgilerini görmek için bu kısmı çalıştırabilirsiniz!
Biz bu çalışmayı GPU (Tesla t4) üzerinde yapacağız.
"""

from tensorflow.python.client import device_lib
device_lib.list_local_devices()

"""### Kütüphanelerin kurulması ve gerekli importların yapılması adımı"""

!pip install -q tensorflow

import tensorflow as tf
#tf.__version__
tf.keras.__version__



from __future__ import print_function
import tensorflow  as tf
from tensorflow import keras
from keras.datasets import mnist
from keras.models import load_model
from keras.models import Sequential
from keras.regularizers import l2
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K
from keras.callbacks import ReduceLROnPlateau

import matplotlib.pyplot as plt

"""## Veri Setinin İndirilmesi"""

(x_train, y_train), (x_test, y_test) = mnist.load_data()

"""### Verilerden bir kısım örneğin görselleştirilmesi
Bu adımı yapmak zorunda değiliz. Yeniden boyutlandırma veriden bir kısmının ekrana yazdırılması hakkında fikir sehibi olmuş oluyoruz.
"""

plt.figure(figsize=(14,14))
x, y = 10, 4 
for i in range(40):  
    plt.subplot(y, x, i+1)
    plt.imshow(x_train[i])
plt.show()

"""### Yapılandırma Ayarları"""

batch_size = 128 # Küme Boyutu
num_classes = 10 # Sınıf Sayısı
epochs = 20 # Eğitimin epoch sayısı
w_l2 = 1e-5 # Başlangıç

reduce_lr = ReduceLROnPlateau(
    monitor='val_loss', factor=0.2, patience=5, verbose=0,
    mode='auto', min_delta=0.0001, cooldown=0, min_lr=w_l2
)

img_rows, img_cols = 28, 28

if K.image_data_format() == 'channels_first':
    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
    input_shape = (1, img_rows, img_cols)
else:
    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
    input_shape = (img_rows, img_cols, 1)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# sınıf vektörlerini ikili sınıf matrislerine dönüştürmek
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

"""### Sigmoid Fonksiyonu """

model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),  kernel_regularizer=l2(w_l2),
                 input_shape=input_shape))
model.add(BatchNormalization())
model.add(Activation('sigmoid'))
model.add(Conv2D(64, (3, 3),  kernel_regularizer=l2(w_l2)))
model.add(BatchNormalization())
model.add(Activation('sigmoid'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, kernel_regularizer=l2(w_l2)))
model.add(BatchNormalization())
model.add(Activation('sigmoid'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))

model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adam(),
              metrics=['accuracy'])
model.summary()

"""### Modelin Eğitilm ve Test Sonuçları 

"""

hist_sigmoid=model.fit(x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(x_test, y_test), callbacks=[reduce_lr])
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

"""### Hiperbolik Tanjant Fonksiyonu"""

model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),  kernel_regularizer=l2(w_l2),
                 input_shape=input_shape))
model.add(BatchNormalization())
model.add(Activation('tanh'))
model.add(Conv2D(64, (3, 3),  kernel_regularizer=l2(w_l2)))
model.add(BatchNormalization())
model.add(Activation('tanh'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, kernel_regularizer=l2(w_l2)))
model.add(BatchNormalization())
model.add(Activation('tanh'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))

model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adam(),
              metrics=['accuracy'])
model.summary()

"""### Modelin Eğitilm ve Test Sonuçları """

hist_tanh=model.fit(x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(x_test, y_test), callbacks=[reduce_lr])
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

"""### ReLU Fonksiyonu"""

model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),  kernel_regularizer=l2(w_l2),
                 input_shape=input_shape))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3),  kernel_regularizer=l2(w_l2)))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, kernel_regularizer=l2(w_l2)))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))

model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adam(),
              metrics=['accuracy'])
model.summary()

"""### Modelin Eğitilm ve Test Sonuçları 

"""

hist_relu=model.fit(x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(x_test, y_test), callbacks=[reduce_lr])
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

"""### Leaky (Sızıntı) ReLU Fonksiyonu
Bu fonksiyon keras içinde [advanced activation function](https://keras.io/layers/advanced-activations/) olarak tanımlıdır bu yüzen bu fonksiyonu import edip model içinde kullanmamız gerekir.
"""

from keras.layers.advanced_activations import LeakyReLU

model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),  kernel_regularizer=l2(w_l2),
                 input_shape=input_shape))
model.add(BatchNormalization())
model.add(LeakyReLU(alpha=.001))
model.add(Conv2D(64, (3, 3),  kernel_regularizer=l2(w_l2)))
model.add(BatchNormalization())
model.add(Dense(64, activation='linear'))
model.add(LeakyReLU(alpha=.001))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, kernel_regularizer=l2(w_l2)))
model.add(BatchNormalization())
model.add(Dense(128, activation='linear'))
model.add(LeakyReLU(alpha=.001))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))

model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adam(),
              metrics=['accuracy'])
model.summary()

"""### Modelin Eğitilm ve Test Sonuçları 

"""

hist_LeakyReLU=model.fit(x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(x_test, y_test), callbacks=[reduce_lr])
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

"""### Swish Aktivasyon Fonksiyonunun Tanımlanması"""

def swish(x):
    return x * K.sigmoid(x)
    # return x * (1/(1 + K.exp(-x)))

model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3), kernel_regularizer=l2(w_l2),
                 input_shape=input_shape, kernel_initializer='he_normal'))
model.add(BatchNormalization())
model.add(Activation(swish))
model.add(Conv2D(64, (3, 3), kernel_regularizer=l2(w_l2), kernel_initializer='he_normal'))
model.add(BatchNormalization())
model.add(Activation(swish))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, kernel_regularizer=l2(w_l2), kernel_initializer='he_normal'))
model.add(BatchNormalization())
model.add(Activation(swish))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))

model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adam(),
              metrics=['accuracy'])

model.summary()

"""### Modelin Eğitilm ve Test Sonuçları 
Histogram tanımlaması
"""

hist_swish=model.fit(x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(x_test, y_test), callbacks=[reduce_lr])
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

hist_swish.history.keys()

import pandas as pd
df=pd.DataFrame(hist_swish.history)
df

"""## Kaydedilen sonuçların çizilmesi için plot fonksiyonunun tanımlanması"""

def plot_history(hists, attribute='val_loss', axis=(-1,21,0.85,0.94), loc='lower right'):
    ylabel = {'loss': 'loss', 'accu': 'accuracy'}
    title = {'val_loss': 'valid. loss', 'loss': 'trn. loss', 'val_accuracy': 'valid. accuracy', 'acc': 'trn. accuracy'}
    num_hists = len(hists)
    
    plt.figure(figsize=(12, 8))  
    plt.axis(axis)
    for i in range(num_hists):
        plt.plot(hists[i].history[attribute])
    plt.title(title[attribute])  
    plt.ylabel(ylabel[attribute[4:8]])  
    plt.xlabel('epoch')  
    plt.legend(['Sigmoid', 'tanh', 'ReLU', 'Leaky_ReLU', 'Swish'], loc=loc)  
    plt.grid()
    plt.show()

hists = [hist_sigmoid, hist_tanh, hist_relu, hist_LeakyReLU, hist_swish]

"""## SONUÇLARIN KARŞILAŞTIRILMASI"""

plot_history(hists, attribute="val_accuracy",axis=(-2,21,0.90,0.9960), loc='lower right')

plot_history(hists, attribute='val_loss', axis=(-1,21,0.94,1.01), loc='lower right')

plot_history(hists, attribute='val_loss', axis=(-1,21,0.02,0.18), loc='upper right')

plot_history(hists, attribute='val_loss', axis=(-1,21,0.009,0.25), loc='upper right')

